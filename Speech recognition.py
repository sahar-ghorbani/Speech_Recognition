# -*- coding: utf-8 -*-
"""exer3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1OqS9GDlA8R8otXwtms5-h2CjxWkzj2ac?usp=sharing
"""

! pip install librosa
! pip install mir_eval
!pip install scipy
import librosa
import librosa.display as dsp
import mir_eval
from IPython.display import Audio
import matplotlib.pyplot as plt
import numpy as np
import scipy
from scipy import signal
from scipy.fft import fft, fftshift
import matplotlib.pyplot as plt
import numpy

def _sgn(x):
  y = numpy.zeros_like(x)
  y[numpy.where(x >= 0)] = 1.0
  y[numpy.where(x < 0)] = -1.0
  return y


def stzcr(x, win,sample):
  """Compute short-time zero crossing rate."""
  if isinstance(win, str):
    win = scipy.signal.get_window(win, sample)
  win = 0.5 * win/len(win)
  x1 = numpy.roll(x, 1)
  x1[0] = 0.0
  abs_diff = numpy.abs(_sgn(x) - _sgn(x1))
  return scipy.signal.convolve(abs_diff, win, mode="full")

def ste(x, win):
  """Compute short-time energy."""
  if isinstance(win, str):
    win = scipy.signal.get_window(win, max(1, len(x) // 8) )
  win = win / len(win)
  return scipy.signal.convolve(x**2, win**2, mode="full")

data1, sample_rate = librosa.load("/content/drive/MyDrive/Voice 006.m4a",duration=5)
Audio(data=data1,rate=sample_rate)

print('Total number of samples: ',data1.shape[0])
print('Sample rate: ',sample_rate)
print('Lenngth of file in seconds: ',librosa.get_duration(data1))

plt.figure(figsize=(14, 5))
librosa.display.waveplot(data1, sr= sample_rate)
plt.show()

n0 = len(data1)-5000
n1 = len(data1)
plt.figure(figsize=(14, 5))
plt.plot(data1[n0:n1])
plt.grid(True)
plt.show()

Hannwindow = signal.windows.hann(len(data1),sym=True)
plt.plot(Hannwindow)
plt.title("Hann window")
plt.ylabel("Amplitude")
plt.xlabel("Sample")
plt.show()

freqs,windowed = signal.welch(data1,fs=sample_rate,window=Hannwindow)

plt.plot(freqs,windowed)
plt.ylabel("Amplitude")
plt.xlabel("Frequency")
plt.show()

plt.plot(data1*Hannwindow)
plt.show()

print('Hann Window:')
print("Short-time energy: " , np.sum(signal.convolve(data1**2, Hannwindow**2)))
print("Short-time zero-crossing rate: " ,sum(stzcr(data1,Hannwindow,len(data1))))

HammingWindow = signal.windows.hamming(110250,sym=True)
plt.plot(HammingWindow)
plt.title("Hamming window")
plt.ylabel("Amplitude")
plt.xlabel("Sample")
plt.show()

freqs,windowed = signal.welch(data1,fs=sample_rate,window=HammingWindow)

plt.plot(freqs,windowed)
plt.ylabel("Amplitude")
plt.xlabel("Frequency")
plt.show()

plt.plot(data1*HammingWindow)
plt.show()

print('Hamming Window:')
print("Short-time energy: " ,np.sum(signal.convolve(data1**2, HammingWindow**2)))
print("Short-time zero-crossing rate: " ,sum(stzcr(data1,HammingWindow,len(data1))))

BlackmanWindow = signal.windows.blackman(len(data1),sym=True)
plt.plot(BlackmanWindow)
plt.title("Blackman window")
plt.ylabel("Amplitude")
plt.xlabel("Sample")
plt.show()

freqs,windowed = signal.welch(data1,fs=sample_rate,window=BlackmanWindow)

plt.plot(freqs,windowed)
plt.ylabel("Amplitude")
plt.xlabel("Frequency")
plt.show()

plt.plot(data1*BlackmanWindow)
plt.show()

print('Blackman Window:')
print("Short-time energy: " ,np.sum(signal.convolve(data1**2, BlackmanWindow**2)))
print("Short-time zero-crossing rate: " ,sum(stzcr(data1,BlackmanWindow,len(data1))))

"""**Question 2.**"""

import numpy as np
from scipy import signal as sg
import matplotlib.pyplot as plt

freq = 10000
amp = 1
sample=100
time = np.linspace(0, 5,sample)

signal1 = amp*np.sin(2*np.pi*freq*time)

plt.plot(time, signal1)
plt.xlabel('Time (s)')
plt.ylabel('Amplitude')
plt.show()

shift=int(0.2*sample/5)

tlength=int(0.5*sample/5)

start=0
end=10
i=0
w=[]
while end<=sample:

  w.append(HammingWindow[start:end]*signal1[start:end])

  start=start+shift
  end=start+tlength

  i=i+1

#w

# shift=4 
# tlength=10
# start=0
# end=10
# i=0
# w=[]
# while end<=100:
#   w.append(HammingWindow[start:end]*signal1[start:end])

#   start=start+shift
#   end=start+tlength
#   i=i+1

# for i in range(0,len(w)):
#   figure=plt.plot(w[i])

while end<=100:
  w.append(HammingWindow[start:end]*signal1[start:end])
  start=start+shift
  end=start+tlength
  w[i]=np.asmatrix()

freq, t, ZX = scipy.signal.stft(signal1,window="hamming",nperseg=10,noverlap=6)

plt.pcolormesh(t, freq, np.abs(ZX), vmin=0, vmax=amp, shading='gouraud')
plt.title('STFT Magnitude')
plt.ylabel('Frequency [Hz]')
plt.xlabel('Time [sec]')
plt.show()

type(ZX)

stftT=ZX.transpose()

plt.plot(stftT)
plt.show()

t, IZX = scipy.signal.istft(np.log(ZX),window="hamming",nperseg=10,noverlap=6)

IZXM=np.asmatrix(IZX)

IZXT=IZXM.transpose()

plt.plot(abs(IZXT))
plt.title("Cepstrum")
plt.show()

HammingWindow = signal.windows.hamming(len(signal1),sym=True)

plt.plot(signal1*HammingWindow)
plt.show()

